import unittest

import main.cifar10_loader as cl
import main.tensor_flow_cnn_examples as tfe


class FixedLengthRecordReaderTestCase(unittest.TestCase):

    def test_static_conv2d(self):
        conv_result = tfe.conv_example_static()

        print("Convolution result: ", conv_result)
        print("Result with shape: ", conv_result.shape)
        print(conv_result[0, 0, 0])
        print(conv_result[0, 1, 0])
        print(conv_result[0, 2, 0])

    def test_conv2d_image(self):
        print("test_conv2d_image")
        cifar10_record_list = cl.load_data_set()

        image_data = cifar10_record_list[0].payload.tolist()
        print(image_data)

        conv_result = tfe.conv_example_static(input=[image_data], filter_var_name='image_filter1')

        print("Convolution result: ", conv_result)
        print("Result with shape: ", conv_result.shape)
        print(conv_result[0, 0, 0])
        print(conv_result[0, 1, 0])
        print(conv_result[0, 2, 0])

    def test_maxpool(self):
        print("test_maxpool_image")

        conv_result = tfe.maxpool_example_static()

        print("MaxPool result: ", conv_result)
        print("Result with shape: ", conv_result.shape)

    def test_maxpool_image(self):
        print("test_maxpool_image")
        cifar10_record_list = cl.load_data_set()

        image_data = cifar10_record_list[0].payload.tolist()
        print(image_data)

        conv_result = tfe.maxpool_example_static(input=[image_data], maxpool_var_name='maxpool_filter_1')

        print("Maxpool result: ", conv_result)
        print("Result with shape: ", conv_result.shape)

    def test_maxpool_customized_input(self):
        maxpool_test_input_array = [[
            [[2., 2., 2.], [1., 1., 1.], [1., 1., 1.], [2., 2., 2.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.],
             [1., 1., 1.], [1., 1., 1.],
             [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.]],
            [[1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.],
             [1., 1., 1.], [1., 1., 1.],
             [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.]],
            [[1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.],
             [1., 1., 1.], [1., 1., 1.],
             [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.]],
            [[1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.],
             [1., 1., 1.], [1., 1., 1.],
             [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.]],
            [[1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.],
             [1., 1., 1.], [1., 1., 1.],
             [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.]],
            [[1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.],
             [1., 1., 1.], [1., 1., 1.],
             [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.]],
            [[1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.],
             [1., 1., 1.], [1., 1., 1.],
             [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.]],
            [[1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.],
             [1., 1., 1.], [1., 1., 1.],
             [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.]],
            [[1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.],
             [1., 1., 1.], [1., 1., 1.],
             [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.]],
            [[1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.],
             [1., 1., 1.], [1., 1., 1.],
             [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.]],
            [[1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.],
             [1., 1., 1.], [1., 1., 1.],
             [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.]],
            [[1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.],
             [1., 1., 1.], [1., 1., 1.],
             [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.]],
            [[1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.],
             [1., 1., 1.], [1., 1., 1.],
             [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.]],
            [[1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.],
             [1., 1., 1.], [1., 1., 1.],
             [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.]],
            [[1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.],
             [1., 1., 1.], [1., 1., 1.],
             [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.]],
            [[2., 2., 2.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.],
             [1., 1., 1.], [1., 1., 1.],
             [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.]]
        ]]

        conv_result = tfe.maxpool_example_static(input=maxpool_test_input_array,
                                                 maxpool_var_name='maxpool_filter_2')

        print("Maxpool customized input result: ", conv_result)
        print("Result with shape: ", conv_result.shape)


if __name__ == '__main__':
    unittest.main()
