# Copyright 2018 Esteban Collado.
#
# Licensed under the MIT License
import tensorflow as tf

import numpy as np

NUM_CLASSES = 10

print("hello")


def conv_example_static(input=None, filter_weights=None,
                        filter_var_name='filter_weights'):
    with tf.variable_scope('conv1') as scope:
        if filter_weights is None:
            filter_weights = [
                                          [[[1., 1., 1.], [1., 1., 1.], [1., 1., 1.]],
                                           [[1., 1., 1.], [1., 1., 1.], [1., 1., 1.]],
                                           [[1., 1., 1.], [1., 1., 1.], [1., 1., 1.]]],
                                          [[[1., 1., 1.], [1., 1., 1.], [1., 1., 1.]],
                                           [[1., 1., 1.], [1., 1., 1.], [1., 1., 1.]],
                                           [[1., 1., 1.], [1., 1., 1.], [1., 1., 1.]]],
                                          [[[1., 1., 1.], [1., 1., 1.], [1., 1., 1.]],
                                           [[1., 1., 1.], [1., 1., 1.], [1., 1., 1.]],
                                           [[1., 1., 1.], [1., 1., 1.], [1., 1., 1.]]]
                                      ]
        conv_filter = tf.get_variable(filter_var_name,
                                      initializer=tf.constant(filter_weights)
                                      )

        if input is None:
            input = [[
                [[1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.],
                 [1., 1., 1.], [1., 1., 1.],
                 [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.]],
                [[1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.],
                 [1., 1., 1.], [1., 1., 1.],
                 [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.]],
                [[1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.],
                 [1., 1., 1.], [1., 1., 1.],
                 [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.]],
                [[1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.],
                 [1., 1., 1.], [1., 1., 1.],
                 [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.]],
                [[1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.],
                 [1., 1., 1.], [1., 1., 1.],
                 [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.]],
                [[1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.],
                 [1., 1., 1.], [1., 1., 1.],
                 [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.]],
                [[1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.],
                 [1., 1., 1.], [1., 1., 1.],
                 [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.]],
                [[1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.],
                 [1., 1., 1.], [1., 1., 1.],
                 [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.]],
                [[1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.],
                 [1., 1., 1.], [1., 1., 1.],
                 [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.]],
                [[1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.],
                 [1., 1., 1.], [1., 1., 1.],
                 [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.]],
                [[1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.],
                 [1., 1., 1.], [1., 1., 1.],
                 [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.]],
                [[1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.],
                 [1., 1., 1.], [1., 1., 1.],
                 [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.]],
                [[1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.],
                 [1., 1., 1.], [1., 1., 1.],
                 [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.]],
                [[1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.],
                 [1., 1., 1.], [1., 1., 1.],
                 [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.]],
                [[1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.],
                 [1., 1., 1.], [1., 1., 1.],
                 [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.]],
                [[1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.],
                 [1., 1., 1.], [1., 1., 1.],
                 [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.], [1., 1., 1.]]
            ]]

        print("Convolution with input of shape ", np.array(input).shape," and filter of shape: ", np.array(filter_weights).shape)
        conv = tf.nn.conv2d(input=input, filter=conv_filter, strides=[1, 1, 1, 1], padding='SAME')

    session = tf.Session()
    session.run(tf.global_variables_initializer())

    return session.run(conv)
